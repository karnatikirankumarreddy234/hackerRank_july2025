#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'queensAttack' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. INTEGER k
 *  3. INTEGER r_q
 *  4. INTEGER c_q
 *  5. 2D_INTEGER_ARRAY obstacles
 */

int queensAttack(int n, int k, int r_q, int c_q, vector<vector<int>> obstacles) {
    set<pair<int,int>> obstacle_set;
    for (auto& obs : obstacles) {
        obstacle_set.insert({obs[0], obs[1]});
    }

    vector<pair<int, int>> directions = {
        {-1,  0}, // up
        { 1,  0}, // down
        { 0, -1}, // left
        { 0,  1}, // right
        {-1, -1}, // up-left
        {-1,  1}, // up-right
        { 1, -1}, // down-left
        { 1,  1}  // down-right
    };

    int attackableSquares = 0;

    for (auto& dir : directions) {
        int r = r_q + dir.first;
        int c = c_q + dir.second;

        while (r >= 1 && r <= n && c >= 1 && c <= n &&
               obstacle_set.find({r, c}) == obstacle_set.end()) {
            attackableSquares++;
            r += dir.first;
            c += dir.second;
        }
    }

    return attackableSquares;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string first_input;
    getline(cin, first_input);
    vector<string> first_values = split(rtrim(first_input));

    int n = stoi(first_values[0]);
    int k = stoi(first_values[1]);

    string queen_pos_input;
    getline(cin, queen_pos_input);
    vector<string> queen_pos = split(rtrim(queen_pos_input));
    int r_q = stoi(queen_pos[0]);
    int c_q = stoi(queen_pos[1]);

    vector<vector<int>> obstacles(k);
    for (int i = 0; i < k; i++) {
        obstacles[i].resize(2);
        string obstacle_input;
        getline(cin, obstacle_input);
        vector<string> obstacle_pos = split(rtrim(obstacle_input));
        obstacles[i][0] = stoi(obstacle_pos[0]);
        obstacles[i][1] = stoi(obstacle_pos[1]);
    }

    int result = queensAttack(n, k, r_q, c_q, obstacles);

    fout << result << "\n";
    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);
    s.erase(s.begin(), find_if(s.begin(), s.end(),
             not1(ptr_fun<int, int>(isspace))));
    return s;
}

string rtrim(const string &str) {
    string s(str);
    s.erase(find_if(s.rbegin(), s.rend(),
             not1(ptr_fun<int, int>(isspace))).base(),
             s.end());
    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;
    string::size_type start = 0, end = 0;
    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));
        start = end + 1;
    }
    tokens.push_back(str.substr(start));
    return tokens;
}
