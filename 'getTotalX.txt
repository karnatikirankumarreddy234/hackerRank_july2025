#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

// Custom GCD function
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Custom LCM function
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

/*
 * Complete the 'getTotalX' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY a
 *  2. INTEGER_ARRAY b
 */
int getTotalX(vector<int> a, vector<int> b) {
    int lcm_a = a[0];
    for (size_t i = 1; i < a.size(); ++i) {
        lcm_a = lcm(lcm_a, a[i]);
    }

    int gcd_b = b[0];
    for (size_t i = 1; i < b.size(); ++i) {
        gcd_b = gcd(gcd_b, b[i]);
    }

    int count = 0;
    for (int x = lcm_a; x <= gcd_b; x += lcm_a) {
        if (gcd_b % x == 0)
            count++;
    }

    return count;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);

    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

    int n = stoi(first_multiple_input[0]);
    int m = stoi(first_multiple_input[1]);

    string arr_temp_temp;
    getline(cin, arr_temp_temp);
    vector<string> arr_temp = split(rtrim(arr_temp_temp));
    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        arr[i] = stoi(arr_temp[i]);
    }

    string brr_temp_temp;
    getline(cin, brr_temp_temp);
    vector<string> brr_temp = split(rtrim(brr_temp_temp));
    vector<int> brr(m);
    for (int i = 0; i < m; i++) {
        brr[i] = stoi(brr_temp[i]);
    }

    int total = getTotalX(arr, brr);
    fout << total << "\n";
    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);
    s.erase(s.begin(), find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace))));
    return s;
}

string rtrim(const string &str) {
    string s(str);
    s.erase(find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(), s.end());
    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;
    string::size_type start = 0, end;
    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));
        start = end + 1;
    }
    tokens.push_back(str.substr(start));
    return tokens;
}
